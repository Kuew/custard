// Generated by CoffeeScript 1.4.0
(function() {
  var ModelBase, User, bcrypt, fresh_apikey, mongoose, rand32, userSchema, zDbUser, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  bcrypt = require('bcrypt');

  mongoose = require('mongoose');

  _ = require('underscore');

  userSchema = new mongoose.Schema({
    shortName: {
      type: String,
      unique: true
    },
    email: [String],
    displayName: String,
    password: String,
    apikey: {
      type: String,
      unique: true
    },
    isStaff: Boolean,
    created: {
      type: Date,
      "default": Date.now
    }
  });

  zDbUser = mongoose.model('User', userSchema);

  ModelBase = (function() {

    function ModelBase(obj) {
      var k;
      for (k in obj) {
        this[k] = obj[k];
      }
    }

    ModelBase.makeModelFromMongo = function(mongo_document) {
      var newModel;
      newModel = new this.constructor({});
      newModel.dbInstance = mongo_document;
      _.extend(newModel, mongo_document.toObject());
      return newModel;
    };

    return ModelBase;

  })();

  User = (function(_super) {

    __extends(User, _super);

    function User(obj) {
      User.__super__.constructor.call(this, obj);
      if (!('apikey' in obj)) {
        this.apikey = fresh_apikey();
      }
      this;

    }

    User.prototype.checkPassword = function(password, callback) {
      return User.findByShortName(this.shortName, function(err, user) {
        if (err != null) {
          console.warn(err);
        }
        if (!(user != null)) {
          return callback(false);
        }
        return bcrypt.compare(password, user.password, function(err, correct) {
          if (correct) {
            return callback(true, user);
          } else {
            return callback(false);
          }
        });
      });
    };

    User.prototype.setPassword = function(password, callback) {
      var _this = this;
      return bcrypt.hash(password, 10, function(err, hash) {
        if (err != null) {
          callback(err, null);
        }
        _this.password = hash;
        return _this.save(callback);
      });
    };

    User.prototype.objectify = function() {
      var k, res;
      res = {};
      for (k in this) {
        res[k] = this[k];
      }
      delete res.dbUser;
      return res;
    };

    User.prototype.save = function(callback) {
      var k;
      if (!(this.dbInstance != null)) {
        this.dbInstance = new this.constructor.dbClass(this);
      } else {
        for (k in this.dbInstance) {
          if (this.hasOwnProperty(k)) {
            this.dbInstance[k] = this[k];
          }
        }
      }
      return this.dbInstance.save(callback);
    };

    User.dbClass = zDbUser;

    User.findByShortName = function(shortName, callback) {
      var _this = this;
      return this.dbClass.findOne({
        shortName: shortName
      }, function(err, user) {
        if (err != null) {
          console.warn(err);
          callback(err, null);
        }
        if (user != null) {
          return callback(null, _this.makeModelFromMongo(user));
        } else {
          return callback(null, null);
        }
      });
    };

    User.findAll = function(callback) {
      var _this = this;
      return this.dbClass.find({}, function(err, users) {
        var result, u;
        if (err != null) {
          console.warn(err);
          callback(err, null);
        }
        if (users != null) {
          result = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = users.length; _i < _len; _i++) {
              u = users[_i];
              _results.push(this.makeModelFromMongo(u));
            }
            return _results;
          }).call(_this);
          return callback(null, result);
        } else {
          return callback(null, null);
        }
      });
    };

    return User;

  })(ModelBase);

  rand32 = function() {
    return Math.floor(Math.random() * Math.pow(2, 32));
  };

  fresh_apikey = function() {
    return [rand32(), rand32()].join('-');
  };

  module.exports = User;

}).call(this);
